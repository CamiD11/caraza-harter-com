Directions:

You'll need access to the subdirectory of the S3 bucket that represents your course:
"a" directory: Meena's course
"b" directory: Tyler's course
"c" directory: Peyman's course

The ~/.aws/credentials file should contain something like this:

[yourname]
aws_access_key_id = ????
aws_secret_access_key = ????

Main steps:
1. update/upload roster
2. download submissions
3. assign CRs
4. run auto-grader
5. generate pN.json grade files
6. upload grades to Canvas

1. Roster:
- export canvas grades to canvas.csv
- run canvas_to_roster.py to update roster.json
- run "aws s3 cp roster.json s3://caraza-harter-cs301/<COURSE_DIR>/roster.json"

2. Download
- run "python3 s3_backup.py <COURSE_DIR>" twice
- look in "snapshot" directory

3. Assign CRs
- download S3 files (as above)
- Create a tas.json that looks like this:
  [{"email":"????", "name":"????", "weight":1}, ...]
- update "COURSE" variable in assign-crs.py to match your course directory
- run "python3 assign-crs.py p1" (or similar)
- run "aws s3 cp p1-cr-assignments.json s3://caraza-harter-cs301/<COURSE_DIR>/projects/p1-cr-assignments.json" (or similar)

4. see here: https://github.com/tylerharter/cs320/tree/master/grader

========================================

email_announcement.py:
    send emails from a JSON file

email_grep.py:
    search emails in JSON file for a pattern, and summarize matches in HTML file

get_google_id.py
    translate net_id to google id

get_netid.py
    translate google id to net_id

lookup_google_user.py
    dump user JSON blob for google user

s3_backup.py
    copy all S3 data to ./snapshot directory

project_summary.py
    create ./grades/p1.json, ./grades/p2.json, etc
    takes input from ./snapshot directory (generated by s3_backup)
    uses:
      - feed into notebook to update Canvas
      - generate stats emails and blobs for students

share_project_summary.py
    uses ./grades/* files to send student emails
    and populate progress snapshot

roster_dump.py
    run on CS machines to generate roster.json (for site) from roster files

unlink_netid.py
    for fixing weird corruption
    dissaciate net_id from google ID in S3

fetch_projects.py:
    example code, not used anymore

ta.py
    test TA permissions

canvas_to_roster.py
    - create roster.json from canvas.csv
    - one time only (use update_enrolled.py to update later)
    - can we replace this with update_enrolled.py?

update_enrolled.py
    - use a canvas.csv
    - to update a roster.json
    - set enrolled to True/False

rebalance_tas.py
    - update TA assignments in roster.json
    - balance TAs across sections by weight
    - also make sure it is balanced according to the submission for a particular assignment

exam_to_roster.py
    - add a field to roster.json indicating exam rooms

========================================

Emailing summary workflow:
1. download all from S3 with s3_backup.py
2. compute grades with project_summary.py
3. generate status emails with share_project_summary.py
4. see how many people are out of time with email_grep.py
5. send emails with email_announcement.py
