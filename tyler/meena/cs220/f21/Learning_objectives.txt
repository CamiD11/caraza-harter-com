Lecture 1: Introduction


Lecture 2: The Terminal
2.1 Access the Terminal(Mac) or PowerShell (Windows) application

2.2 Use basic Terminal/PowerShell commands

Lecture 3: Pseudocode
3.1 Define PseudoCode and explain why it is useful

3.2 Hand-trace PseudoCode algorithms

Lecture 4: Programming
4.1 Run Python Code
   from the command line
   from a Jupyter Notebook
 

4.2 Evaluate expressions containing basic Python operators:
   Mathematical (e.g., “+” and “-“)
   Comparison (e.g., “==” and “>”)
   Logical (e.g., “and” and “not”)

4.3 Recognize examples of different Python data types:
   int, float, str, bool

4.4 Evaluate boolean expressions


Lecture 5: Variables and Expressions
5.1 Evaluate Expressions
 by identifying operators and operands
 by identifying literal values and variables
 by identifying the correct order of operations
  
5.2 Write assignment statements with proper syntax
 Start with a variable name that follows proper rules for variables
 Use a single equals sign
 Finish with an expression
  
5.3 Define, give examples of, and identify 3 kinds of errors
 Syntax error
 Runtime error
 Semantic error
  
5.4 Write Python code that computes with strings ints, floats, and Boolean types


Lecture 6: Using Functions and Modules
6.1 Call common functions that are built into Python:
  convert from one type to another using int(), str(), and float()
  accept a string from the user using input()
  convert the result of input() to int, float, or bool, if possible
  
6.2 Import a module and use functions from a module:
  Utilize 3 different kinds of syntax to import a module
  Use the attribute operator (the ".") with module functions
  Use functions from the math module
  Use functions from a programmer-created module
  
6.3 Inspect a module to determine its functions:
  via online documentation
  via the help function in python
  
6.4 Using correct vocabulary, explain how functions work
  Define the following functions terms: call/invoke, argument, parameter, return value
  
6.5 Determine the flow of control of a program that contains functions


Lecture 7: Creating Functions
7.1 Explain the syntax of a function header
  the def command
  the name of the function and ( ) 
  an optional list of parameters
  the colon :
  
7.2 Write a function
  with a correct header and correct indentation
  with a return value (fruitful function)
  without a return value ( void function)
  with or without default arguments
  with a docstring comment
  knowing the difference in outcomes of print and return statements
  
7.3 Make function calls
  by using the correct number of positional arguments
  by utilizing default arguments
  by utilizing keyword arguments
  
7.4 Use keyword arguments with the print function

7.5 Determine the result of Python function calls
  using hand-tracing
  using Python Tutor
  using PyTutor Interactive Worksheets
  
Lecture 8: Function Scope
8.1 Explain the rules of scope of a local variable in a function
  When are they created?
  When are they destroyed?
  What parts of a program have access to them?
  
8.2 Explain the rules of scope of a global variable
  Where are they stored?
  What parts of a program have access to them?
  How can they be mis-represented as local variables?
  How can they be used and modified within a function?
  
8.3 Explain how arguments to functions are passed by value

8.4 Hand-trace programs by
  Using frame diagrams
  Determining the value and scope of local and global variables
  Utilizing the “pass by value” rule for arguments
  Using Python Tutor 
  
Lecture 9: Conditionals part 1
9.1 Read and Write Python Conditional Statements
  Using Conditional execution	(	if )
  Using Alternate execution		(if/else)
  Using Chained conditionals		(if/elif/elif/…/else)
  Using Nested conditionals		(if…..if….else….if …else)
  
9.2 Identify nested code blocks (indentation layers) in a program 

9.3 Convert Flowcharts or Pseudocode into Python Conditional Statements

9.4 Write a program that makes choices by using conditional statements

Lecture 10: Nested Conditionals and Refactoring
10.1 Read and Write Nested conditional statements

10.2 Define, state reasons for, and provide examples of refactoring.

10.3 Solve a programming problem that uses conditional statements by breaking it down into several functions

10.4 Determine whether two functions produce the same results in all cases.


Lecture 11: Iteration
11.1 Implement an iterative algorithm using a while loop
- example: printing / counting
- example: validating user input
- example: performing an iterative calculation

11.2 Implement nested iteration using while loops

11.3 Recognize common while loop errors
- Infinite loops (when unintentional)
- Off-by-one mistakes

11.4 Determine the output of iterative algorithms

Lecture 12: Break and Continue
12.1 Read and write Python code using break in a while loop

12.2 Read and write Python code using continue in while loop

12.3 Determine the effect of break and continue in nested loops

12.4 Determine how many times a line of code executes in a while loop
- if the code is inside the body of the loop
- if the code is the while loop condition


Lecture 13:  Exam


Lecture 14: Strings and for loops
14.1 Compare two strings by hand using < or > 

14.2 Recognize common string methods, explain what they do, and use them in Python code

14.3 Define the term sequence, name common sequence operations, and explain how a string is a sequence

14.4 Read and Write code that uses a for loop 
- to iterate over a string
- to iterate over a sequence of numbers using the range function

14.5 Index and slice strings using correct syntax, including positive and negative indices



Lecture 15: Lists
15.1 Create a list, store multiple types of values in a list, and use sequence operations on a list
- access elements of a list inside of list using double indexing [] [] 

15.2 Define mutability and recognize that lists are mutable but strings are not

15.3 Mutate a list using list indexing, double indexing, list methods such as sort,() pop(), append() and operators such as + and *

15.4 Use the join() and split() methods when working with lists and strings

15.5 Write functions that process lists of numbers or strings


Lecture 16: CSV files
16.1 Open an Excel file and export it to a Comma Separated Value file.

16.2 Open a CSV file in TextEdit/Notepad and connect the elements of the CSV file to the rows and columns in the spreadsheet.

16.3 Use pre-written Python code to read a CSV file into a list of lists.

16.4 Write Python statements with double list indexing to access any element of a CSV file via a list of lists.

16.5 Write code that answers questions about CSV data by writing for loops on lists of lists.

16.6 Identify in code how sys.argv is used to read arguments into a command-line Python script.

16.7 Use the cat command to view the contents of binary or CSV files.

Lab-P6: 
P6.1 Write a Python function to extract a single cell from a dataset given a row number and a column name.

P6.2 State the uses of and differences between using sorted() and .sort() on a list and on a string.

P6.3 Using correct syntax, create a set and use basic set operations.

P6.4 State the similarities and differences between a set and a list. 

P6.5 Use the set() and list() commands to generate a list of the unique values in a list.



Lecture 17: Three Tricky Things with Lists
17.1 Write functions that process CSV files (name lookup, minimum distance)

17.2 Determine the error when removing from a list inside a 'for' loop, and write code to correctly avoid this problem

17.3 Determine the error when modifying a list inside a 'for' loop, and write code to correctly avoid this problem

17.4 Determine the error when a list sent as an argument to a function is modified by the function, and write code to avoid this.


Lecture 18: Dictionaries
18.1 Understand the advantages dictionaries have over lists.

18.2 Use correct dictionary syntax 
- to create a dictionary using either {} or dict()
- to lookup, insert, update, and pop key/value pairs

18.3 Use a for loop, the in operator, and common methods when working with dictionaries.

18.4 Write code that uses a dictionary
- to store frequencies
- to store and process information that is updated


Lecture 19: Dictionaries and Lists
19.1 Handle dictionary key errors by using get, pop, and defaultdict

19.2 Select the appropriate data structure for a situation (list, dictionary, set, list-dictionary combination)

19.3 Use a dictionary of lists to put rows of data into "buckets"

19.4 Use a list of dictionaries to represent a table of data.


